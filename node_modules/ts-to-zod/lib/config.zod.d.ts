import { z } from "zod";
export declare const getSchemaNameSchema: z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodString>;
export declare const nameFilterSchema: z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodBoolean>;
export declare const configSchema: z.ZodObject<{
    input: z.ZodString;
    output: z.ZodString;
    skipValidation: z.ZodOptional<z.ZodBoolean, false>;
    maxRun: z.ZodOptional<z.ZodNumber, false>;
    nameFilter: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodBoolean>, false>;
    getSchemaName: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodString>, false>;
    keepComments: z.ZodOptional<z.ZodOptional<z.ZodBoolean, false>, true>;
}, "strip", z.ZodTypeAny, {
    maxRun?: number | undefined;
    nameFilter?: ((args_0: string) => boolean) | undefined;
    getSchemaName?: ((args_0: string) => string) | undefined;
    keepComments?: boolean | undefined;
    skipValidation?: boolean | undefined;
    input: string;
    output: string;
}, {
    maxRun?: number | undefined;
    nameFilter?: ((args_0: string) => boolean) | undefined;
    getSchemaName?: ((args_0: string) => string) | undefined;
    keepComments?: boolean | undefined;
    skipValidation?: boolean | undefined;
    input: string;
    output: string;
}>;
export declare const configsSchema: z.ZodArray<z.ZodIntersection<z.ZodObject<{
    input: z.ZodString;
    output: z.ZodString;
    skipValidation: z.ZodOptional<z.ZodBoolean, false>;
    maxRun: z.ZodOptional<z.ZodNumber, false>;
    nameFilter: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodBoolean>, false>;
    getSchemaName: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodString>, false>;
    keepComments: z.ZodOptional<z.ZodOptional<z.ZodBoolean, false>, true>;
}, "strip", z.ZodTypeAny, {
    maxRun?: number | undefined;
    nameFilter?: ((args_0: string) => boolean) | undefined;
    getSchemaName?: ((args_0: string) => string) | undefined;
    keepComments?: boolean | undefined;
    skipValidation?: boolean | undefined;
    input: string;
    output: string;
}, {
    maxRun?: number | undefined;
    nameFilter?: ((args_0: string) => boolean) | undefined;
    getSchemaName?: ((args_0: string) => string) | undefined;
    keepComments?: boolean | undefined;
    skipValidation?: boolean | undefined;
    input: string;
    output: string;
}>, z.ZodObject<{
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
}, {
    name: string;
}>>>;
export declare const tsToZodConfigSchema: z.ZodUnion<[z.ZodObject<{
    input: z.ZodString;
    output: z.ZodString;
    skipValidation: z.ZodOptional<z.ZodBoolean, false>;
    maxRun: z.ZodOptional<z.ZodNumber, false>;
    nameFilter: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodBoolean>, false>;
    getSchemaName: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodString>, false>;
    keepComments: z.ZodOptional<z.ZodOptional<z.ZodBoolean, false>, true>;
}, "strip", z.ZodTypeAny, {
    maxRun?: number | undefined;
    nameFilter?: ((args_0: string) => boolean) | undefined;
    getSchemaName?: ((args_0: string) => string) | undefined;
    keepComments?: boolean | undefined;
    skipValidation?: boolean | undefined;
    input: string;
    output: string;
}, {
    maxRun?: number | undefined;
    nameFilter?: ((args_0: string) => boolean) | undefined;
    getSchemaName?: ((args_0: string) => string) | undefined;
    keepComments?: boolean | undefined;
    skipValidation?: boolean | undefined;
    input: string;
    output: string;
}>, z.ZodArray<z.ZodIntersection<z.ZodObject<{
    input: z.ZodString;
    output: z.ZodString;
    skipValidation: z.ZodOptional<z.ZodBoolean, false>;
    maxRun: z.ZodOptional<z.ZodNumber, false>;
    nameFilter: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodBoolean>, false>;
    getSchemaName: z.ZodOptional<z.ZodFunction<z.ZodTuple<[z.ZodString]>, z.ZodString>, false>;
    keepComments: z.ZodOptional<z.ZodOptional<z.ZodBoolean, false>, true>;
}, "strip", z.ZodTypeAny, {
    maxRun?: number | undefined;
    nameFilter?: ((args_0: string) => boolean) | undefined;
    getSchemaName?: ((args_0: string) => string) | undefined;
    keepComments?: boolean | undefined;
    skipValidation?: boolean | undefined;
    input: string;
    output: string;
}, {
    maxRun?: number | undefined;
    nameFilter?: ((args_0: string) => boolean) | undefined;
    getSchemaName?: ((args_0: string) => string) | undefined;
    keepComments?: boolean | undefined;
    skipValidation?: boolean | undefined;
    input: string;
    output: string;
}>, z.ZodObject<{
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name: string;
}, {
    name: string;
}>>>]>;
